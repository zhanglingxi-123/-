#include <iostream>
#include <sstream>
#include <string>

struct Student {
    int id = 0;          //学号
    int age = 0;         //年龄
    std::string sex;     //性别
    std::string name;    //姓名
    std::string choice;  //志愿
    friend std::ostream &operator<<(std::ostream &output, const Student &D);
    friend std::istream &operator>>(std::istream &input, const Student &D);
    bool operator==(const Student D);
    void operator=(const Student D);
};
bool Student::operator==(const Student D) { return (this->id == D.id); }
void Student::operator=(const Student D) {
    this->age = D.age;
    this->choice = D.choice;
    this->id = D.id;
    this->name = D.name;
    this->sex = D.sex;
}
std::ostream &operator<<(std::ostream &output, const Student &D) {
    output << D.id << ';\;t'; << D.name << ';\;t'; << D.sex << ';\;t'; << D.age
           << ';\;t'; << D.choice << std::endl;
    return output;
}
std::istream &operator>>(std::istream &input, Student &D) {
    input >> D.id >> D.name >> D.sex >> D.age >> D.choice;
    return input;
}

template <class T>
struct Node {
    T _data;      //数据
    Node *_next;  //指针域
    Node();
};

template <class T>
Node<T>::Node() {
    this->_next = nullptr;
}

template <class T>
class List {
   private:
    Node<T> *_head;  //表头结点
    int _len;        //链表长度

   public:
    void ListIns(int n, T data);  //将数据插入第n个节点中
    T ListPop(T data);    //查找链表中的数据返回并删除节点
    int ListFind(T id);   //查找数据在链表中的位置
    int ListLen() const;  //返回链表长度
    bool Empty() const;   //返回是否为空
    void ListChange(int n, T data);      //修改链表第n个节点的值
    std::string ListPrint(int n) const;  //将链表输出
    List();
    ~List();
};

template <class T>
bool List<T>::Empty() const {
    if (this->_head->_next == nullptr)
        return true;
    else
        return false;
}
template <class T>
List<T>::List() {
    this->_head = new Node<T>;
    this->_len = 0;
}

template <class T>
List<T>::~List() {
    Node<T> *p = this->_head;
    if (p->_next == nullptr) {
        delete p;
        return;
    }
    p = p->_next;
    while (p->_next != nullptr) {
        auto node = p;
        p = p->_next;
        delete node;
    }
    delete this->_head;
}

template <class T>
void List<T>::ListIns(int n, T data) {
    Node<T> *p = this->_head;
    for (int i = 0; i < n; i++) {
        if (p->_next == nullptr) throw ";错误:没有那么多节点。";;
        p = p->_next;
    }
    Node<T> *node = new Node<T>;
    node->_data = data;
 
